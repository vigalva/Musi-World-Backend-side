package smartspace.dao.rdb;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import smartspace.dao.AdvancedActionDao;
import smartspace.data.ActionEntity;

@Repository
public class RdbActionDao<K> implements AdvancedActionDao<K> {

	private ActionCrud actionCrud;
	private String actionId;
	private String smartspace;
	private GeneratorIdCrud generatorIdCrud;

	@Autowired
	public RdbActionDao(ActionCrud messageCrud, GeneratorIdCrud generatorIdCrud) {
		this.actionCrud = messageCrud;
		this.generatorIdCrud = generatorIdCrud;

	}

	@Value("${smartspace.name:smartspace}")
	public void setSmartspace(String smartspace) {
		this.smartspace = smartspace;
	}

	@Value("${actionId:0}")
	public void setActionId(String actionId) {
		this.actionId = actionId;
	}

	@Override
	@Transactional
	public ActionEntity create(ActionEntity action) {
		// TODO replace this with key generated by DB
		GeneratorId idEntity = this.generatorIdCrud.save(new GeneratorId());
		if (action.getActionSmartspace()!=null&&action.getActionSmartspace()!=null)
		action.setKey(action.getActionSmartspace() + "!" + action.getActionId() + idEntity.getId());
		else
			action.setKey(smartspace + "!" + actionId + idEntity.getId());
		this.generatorIdCrud.delete(idEntity);

		// SQL: INSERT
		if (!this.actionCrud.existsById(action.getKey())) {
			return this.actionCrud.save(action);
		} else {
			throw new RuntimeException("action already exists with key: " + action.getKey());
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<ActionEntity> readAll() {
		List<ActionEntity> rv = new ArrayList<>();
		// SQL: SELECT
		this.actionCrud.findAll().forEach(rv::add);
		return rv;
	}

	@Override
	@Transactional
	public void deleteAll() {
		// SQL: DELETE
		this.actionCrud.deleteAll();
	}

	@Override
	@Transactional(readOnly = true)
	public List<ActionEntity> readAll(int size, int page) {
		return this.actionCrud.findAll(PageRequest.of(page, size)).getContent();
	}

	@Override
	@Transactional(readOnly = true)
	public List<ActionEntity> readAll(String sortBy, int size, int page) {
		return this.actionCrud.findAll(PageRequest.of(page, size, Direction.ASC, sortBy)).getContent();
	}

}
