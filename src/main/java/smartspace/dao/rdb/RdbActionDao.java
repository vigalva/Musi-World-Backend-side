package smartspace.dao.rdb;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import smartspace.dao.ActionDao;
import smartspace.data.ActionEntity;

@Repository
public class RdbActionDao implements ActionDao{
	
	private ActionCrud actionCrud;
	private  String actionId; 
	private String smartspace;
	
	// TODO remove this
		private AtomicLong serial;

	
	@Autowired
	public RdbActionDao(ActionCrud messageCrud) {
		this.actionCrud = messageCrud;

		// TODO remove this
		this.serial = new AtomicLong(1000L);
	}
	
	@Value("${smartspace.name:smartspace}")
	public void setSmartspace(String smartspace) {
		this.smartspace = smartspace;
	}
	
	@Value("${actionId:0}")
	public void setActionId(String actionId) {
			this.actionId = actionId;
	}
	
	@Override
	@Transactional
	public ActionEntity create(ActionEntity action) {
		// TODO replace this with key generated by DB
		action.setKey(smartspace + "!" +actionId+ serial.getAndIncrement());
		
		// SQL: INSERT
		if (!this.actionCrud.existsById(action.getKey())) {
			return this.actionCrud.save(action);
		}else {
			throw new RuntimeException("message already exists with key: " + action.getKey());
		}
	}

	@Override
	@Transactional(readOnly=true)
	public List<ActionEntity> readAll() {
		List<ActionEntity> rv = new ArrayList<>();
		// SQL: SELECT
		this.actionCrud.findAll()
			.forEach(rv::add);
		return rv;
	}
	@Override
	@Transactional
	public void deleteAll() {
		// SQL: DELETE
		this.actionCrud.deleteAll();
	}

}
